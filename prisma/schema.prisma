// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  TEACHER
  LEARNER
  ADMIN
}

enum CommentType {
  QUESTION
  FEEDBACK
  GENERAL
  REVIEW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum CourseAccessType {
  SIX_MONTHS
  ONE_YEAR
  LIFETIME
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  bio       String?
  role      UserRole @default(LEARNER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses       Course[]       @relation("TeacherCourses")
  enrollments   Enrollment[]
  comments      Comment[]
  quizAttempts  QuizAttempt[]
  payments      Payment[]
  certificates  Certificate[]
  notifications Notification[]
}

model Course {
  id          String           @id @default(cuid())
  title       String
  description String
  price       Float
  accessType  CourseAccessType
  salesStart  DateTime?
  salesEnd    DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  teacher     User          @relation("TeacherCourses", fields: [teacherId], references: [id])
  teacherId   String
  lessons     Lesson[]
  enrollments Enrollment[]
  comments    Comment[]
  quizzes     Quiz[]
  Payment     Payment[]
  Certificate Certificate[]
}

model Lesson {
  id        String    @id @default(cuid())
  title     String
  content   String? // HTML / markdown text
  videoUrl  String?
  imageUrl  String?
  course    Course    @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime  @default(now())
  Comment   Comment[]
}

model Enrollment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  progress  Float    @default(0.0) // percentage
  createdAt DateTime @default(now())
}

model Comment {
  id        String      @id @default(cuid())
  content   String
  type      CommentType
  stars     Int? // only for REVIEW type
  pinned    Boolean     @default(false)
  createdAt DateTime    @default(now())

  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  course   Course?   @relation(fields: [courseId], references: [id])
  courseId String?
  lesson   Lesson?   @relation(fields: [lessonId], references: [id])
  lessonId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId String?
  replies  Comment[] @relation("CommentReplies")
}

model Quiz {
  id          String        @id @default(cuid())
  title       String
  course      Course        @relation(fields: [courseId], references: [id])
  courseId    String
  questions   Question[]
  QuizAttempt QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String
  options String[] // store choices
  answer  String // correct answer
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  quizId  String
}

model QuizAttempt {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  score     Float
  createdAt DateTime @default(now())
}

model Payment {
  id        String        @id @default(cuid())
  amount    Float
  status    PaymentStatus
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  course    Course        @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime      @default(now())
}

model Certificate {
  id       String   @id @default(cuid())
  url      String // path to PDF
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String
  issuedAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  content   String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}